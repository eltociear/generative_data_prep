{"prompt": "", "completion": "jOOQ on The ORM Foundation?\nI am the developer of jOOQ, a Java database abstraction framework. I was wondering whether jOOQ might be an interesting tool for discussion on your website, even if it is not exactly an ORM in the classic meaning (as in mapping objects to the relational world > ORM). Instead, jOOQ uses a reverse engineering paradigm (as in mapping relational entities to objects > \"ROM\").\nRe: jOOQ on The ORM Foundation?\nObject Role Modeling (the original ORM) is not the same thing as Object/Relational Mapping.\nYour query DSL looks rather like some of the DSLs available for Ruby, such as through the Sequel gem, or Arel. Interesting to see how well that can work with a statically-types language like Java. Maybe you or I should make a generator for ActiveFacts which generates your DSL from CQL queries?\nRe: jOOQ on The ORM Foundation?\nSorry for my late reply. Apparently I had not really understood the ideas behind your foundation when I wrote my original post. I understand now, that you are concerned with broader concepts than the \"common ORM\". I actually came across your group because of your linking to ORM Lite (where ORM does stand for Object/Relational Mapping, correct me if I'm wrong).\nYes, I have seen some examples for Ruby's Sequel. I personally find statically-typed languages much better for DSL's as the syntax can be formally defined and checked by a compiler - with the limitations an OO language imposes, of course.\nSo if I understand this correctly now, \"Object Role Modeling\" and CQL are actually a more general way of expressing what SQL calls DDL. Since you can already transform CQL into SQL DDL statements (CREATE TABLE...), and jOOQ can reverse-engineer database schemata into jOOQ generated source code, I don't think there would be need for an additional generator.\nRe: jOOQ on The ORM Foundation?\nObject Role Modeling was named before Object Relational Mapping, but the latter is now the more common meaning, as you point out. But ORM Lite is actually so-named by Bryan because it is an implementation of Object Role Modeling, not because it is also an O/RM. Bryan was a student of Terry's at Neumont, where he learnt ORM.\nRegarding DSLs, I think internal DSLs only work well in very simple cases. I prefer external DSLs for anything complex, and that's where CQL came from. Even the extremely flexible syntax of Ruby wasn't up to the task.\nThis may be hard to see for someone used to O-O modeling, and who's authored an O/RM tool. The problem is that O-O suffers from many of the same problems of loss of semantics. The apparently clear notion of \"attribute\" breaks down when you look at it closely. O-O, although ostensibly behaviour-oriented, introduces attributes to store state, and this attribute orientation is the source of the problem in both cases. Fact-oriented model does not use attributes. Although it may seem obvious that, for example, my surname is an attribute of myself, if the system being modeled accrues the requirement to model families, suddenly surname becomes an attribute of family, and family becomes my attribute. This kind of instability is responsible for much of the rework that's required in evolving legacy systems, as well as many of the mistakes made when they were first modeled. If you want a further example of this loss of semantics, look at my Insurance example, and ask yourself why the VehicleIncident table has a DrivingBloodTestResult column. In fact, if VehicleIncident wasn't explicitly mapped separately, its fields would be in the Claim table.\nWhat's needed is not just yet another O/RM tool (which are tuppence a dozen anyhow - I personally have written three) but a tool which supports database programming using only the conceptual model, never exposing the physical model. Surprisingly, I can't think of a single tool which has done a good job of this, but it's where I'm heading with the ActiveFacts API. It's another O/RM, but using a purely conceptual object model that preserves the domain semantics, not a typical O-O one.\nYes, though the published implementation doesn't quite handle the full query syntax (aggregate functions are still missing), nor does it yet translate them to SQL. Some examples are given towards the end of the video presentation on the CQL Introduction page.\nRe: jOOQ on The ORM Foundation?\nRegarding DSLs, I think internal DSLs only work well in very simple cases. I prefer external DSLs for anything complex, and that's where CQL came from. Even the extremely flexible syntax of Ruby wasn't up to the task.\nAbsolutely. The optimal way to implement SQL in Java would be by extending the Java language itself, such that SQL would be compiled natively by the java compiler, similar to Linq2SQL in C#, or PL/SQL in Oracle databases. So for the complexity of CQL, CQL is certainly the right solution.\nThe problem is that a huge amount of meaning is lost in the mapping to SQL. SQL is practically (though not theoretically) limited to representing physical models.\nIn any case, I don't see jOOQ as a means to solve modelling issues, or the O/R impedance mismatch (which is even bigger when it comes to mapping your understanding of ORM, with CQL). jOOQ should simply make using the full power of SQL in Java as simple as possible. In that way, jOOQ is not really an ORM because it does not map from objects to the relational world, or try to solve any other high-level abstraction issues. It's really a low-level tool to make a developer's life a lot easier, seeing that unfortunately, JPA CriteriaQuery didn't meet the community's expectations.\nWhat's needed is not just yet another O/RM tool (which are tuppence a dozen anyhow - I personally have written three) but a tool which supports database programming using only the conceptual model, never exposing the physical model. Surprisingly, I can't think of a single tool which has done a good job of this, but it's where I'm heading with the ActiveFacts API. It's another O/RM, but using a purely conceptual object model that preserves the domain semantics, not a typical O-O one.\nI think you're on the right track with this. I hope for you, that this will soon show nice results with a practical implementation. I'm curious to see how you'll tackle performance issues, too, with all the abstraction. Among all attempts to overcome the old and proven relational models (XML databases, NoSQL databases), this one seems the most promising and focused to me!"}
{"prompt": "", "completion": "Unity is huge. It's not just huge in sports teams and in successful businesses. It's not just huge in committees or even families. Unity is huge to God. It's huge in churches, from the leadership all the way to the last attender and even more it's huge in terms of the Church with a big 'C'... the collective Christ-followers and the churches in which they worship throughout our nation and world. The verses in God's Word that discuss the importance of unity are prolific and the urgency with which the concept is discussed is palpable.\nThis lyrics speaks to the beautiful truth that singing of His love and sacrifice for us binds believers together in a way that transcends even time. No matter what melody is being sung, no matter what chords are being played by what instruments, believers have been uniting together for centuries singing about the truths of Christ's glorious death and resurrection and all that they imply. To me that's an amazing reality, and one worth giving some serious real estate in our church services!\nAs for the song-writing fodder I promised... this one was fun to play around with as I wrote it. I used a hemiola passage in the verse (played quietly with a wurlitzer) and bridge (a little more apparent from an electric guitar) with three notes being repeated all the way through large 4/4 phrases. I also truncated all of the phrases in the bridge--all of them 3 bars instead of four--just to add to the urgency of the concept sung there. One of the things I think is most fun, though, about this tune is that the chords in the second verse are quite different than in the first even though the melody is identical... capped off with a 2sus chord replacing the typical 5 in the first verse. Yup... theory geek stuff for sure!\nI'm a Christ-following husband, father, songwriter, worship leader and St. Louis Blues fan."}
{"prompt": "", "completion": "Deposits in your Bank of Internet savings account are fully FDIC insured, so your money is absolutely safe when you invest your funds in a Bank of Internet account.\nThe Bank of Internet online savings account has no maintenance fees, so it\u2019s a great opportunity to earn a high interest rate with a free online bank account.\nThere are no monthly maintenance fees for this Bank of Internet account, plus there are no minimum balance requirements and no direct deposit requirements to avoid fees or to earn the great interest rate.\nThere is a $100 minimum opening deposit requirement, but once you open your account, you are not required to maintain a minimum balance thereafter to avoid fees or to earn the high APY.\nThe Bank of Internet High Yield Savings Account provides free online statements, and an ATM card is also available if needed.\nYou can also open this online savings account in conjunction with a free High Interest Checking Account from Bank of Internet for easy transfers between Bank of Internet accounts.\nCheck out our Bank of Internet Review for more details on Bank of Internet online banking services including money market accounts and CDs as well as home equity loans and home mortgage refinancing.\nThen compare the Bank of Internet savings account with other High APY Online Bank Rates before opening this fee-free online bank account.\nOpen a High Yield Savings Account from Bank of Internet today to take advantage of the high interest rate with no fees for online banking."}
